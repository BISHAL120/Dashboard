datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum NotificationType {
  ProductCreated
  ProductUpdated
  ProductDeleted
  ProductStockOut
  CategoryCreated
  CategoryUpdated
  CategoryDeleted
  BlogCreated
  BlogUpdated
  BlogDeleted
  NewOrderPlaced
  OrderCanceled
  OrderReturned
  NewProductReview
  NewRegistration
  NewComment
  Review
}

type Thumbnail {
  url      String
  Filename String
}

model Blog {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  value     String
  banner    String
  author    String
  viewCount Int       @default(0)
  likes     Int       @default(0)
  comments  Comment[]
  published Boolean   @default(false)
  thumb     Thumbnail
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  message   String
  read      Boolean          @default(false)
  type      NotificationType
  referId   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

type ProductImage {
  url      String
  FileName String
}

type Colors {
  id    String
  color String
  stock Int
}

type Varients {
  size  String
  color Colors[]
}

type PType {
  id   String
  type String
}

model ProductType {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  price          String
  discountPrice  String?
  categoryName   String
  brandName      String
  material       String?
  weight         String?
  dimensions     String?
  varients       Varients[]
  ratingsCount   Int?           @default(0)
  ratingsAverage Float?
  description    String
  published      Boolean        @default(false)
  isFeatured     Boolean        @default(false)
  images         ProductImage[]
  tags           String[]
  type           PType
  reviews        Review[]
  orderItems     OrderItem[]
  productType    ProductType    @relation(fields: [productTypeId], references: [id])
  productTypeId  String         @db.ObjectId
  category       Category       @relation(fields: [categoryId], references: [id])
  categoryId     String         @db.ObjectId
  brand          Brand          @relation(fields: [brandId], references: [id])
  brandId        String         @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryName])
  @@index([brandName])
  @@index([type])
}

model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String   @unique
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String?
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

enum Role {
  USER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  totalAmount Float
  status      OrderStatus @default(PENDING)
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  price     Float // Price at the time of order
  quantity  Int     @default(1)
  productId String  @db.ObjectId
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])

  @@index([productId])
  @@index([orderId])
}

model Brand {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  products   Product[]
  Category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String    @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([name])
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  brands    Brand[]
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([name])
}

// model User {
//   id          String    @id @default(auto()) @map("_id") @db.ObjectId
//   name        String
//   email       String
//   password    String
//   role        Role      @default(USER) // Enum for user roles
//   phoneNumber String? // Optional field for phone number
//   address     String? // Optional field for home address
//   city        String? // Optional field for city
//   state       String? // Optional field for state
//   country     String? // Optional field for country
//   postalCode  String? // Optional postal/ZIP code
//   avatarUrl   String? // Optional profile picture URL
//   isVerified  Boolean   @default(false) // Email verification status
//   wishlist    Product[] // Relation to products that users add to their wishlist
//   orders      Order[] // Relation to user's orders
//   reviews     Review[] // One-to-many relation for user reviews

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([email])
// }
